/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.co.oldnicksoftware.cruducucumber.view.editor;

import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.spi.actions.AbstractSavable;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.NotifyDescriptor.Confirmation;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.UndoRedo;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.datatransfer.NewType;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.WindowManager;
import uk.co.oldnicksoftware.crudycucumber.api.*;
import uk.co.oldnicksoftware.crudycucumber.dao.CustomerQuery;
import uk.co.oldnicksoftware.crudycucumber.domain.Customer;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//uk.co.oldnicksoftware.cruducucumber.view.editor//CustomerEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "CustomerEditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "uk.co.oldnicksoftware.cruducucumber.view.editor.CustomerEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_CustomerEditorAction",
        preferredID = "CustomerEditorTopComponent"
)
@Messages({
    "CTL_CustomerEditorAction=CustomerEditor",
    "CTL_CustomerEditorTopComponent=CustomerEditor Window",
    "HINT_CustomerEditorTopComponent=This is a CustomerEditor window"
})
public final class CustomerEditorTopComponent extends TopComponent implements LookupListener {
    private Lookup.Result<Node> customerNodeResult;
    private Lookup.Result<Customer> customerResult;
    private Lookup.Result<CustomerQuery> customerQueryResult;
    private CustomerQuery query;
    private Customer customer;
    private Node customerNode;

    private final UndoRedo.Manager manager = new UndoRedo.Manager();
    private final InstanceContent instanceContent;
    
    public CustomerEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_CustomerEditorTopComponent());
        setToolTipText(Bundle.HINT_CustomerEditorTopComponent());

        nameField.getDocument().addUndoableEditListener(manager);
        cityField.getDocument().addUndoableEditListener(manager);
        
        manager.addChangeListener(new ChangeListener(){@Override public void stateChanged(ChangeEvent e) {modify();}});
        
        instanceContent=new InstanceContent();
        associateLookup(new AbstractLookup(instanceContent));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        cityField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(CustomerEditorTopComponent.class, "CustomerEditorTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(CustomerEditorTopComponent.class, "CustomerEditorTopComponent.jLabel1.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, nameField, org.jdesktop.beansbinding.ObjectProperty.create(), jLabel1, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
        bindingGroup.addBinding(binding);

        nameField.setText(org.openide.util.NbBundle.getMessage(CustomerEditorTopComponent.class, "CustomerEditorTopComponent.nameField.text")); // NOI18N

        cityField.setText(org.openide.util.NbBundle.getMessage(CustomerEditorTopComponent.class, "CustomerEditorTopComponent.cityField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(CustomerEditorTopComponent.class, "CustomerEditorTopComponent.jLabel3.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, cityField, org.jdesktop.beansbinding.ObjectProperty.create(), jLabel3, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cityField, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                    .addComponent(nameField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(228, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cityField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField nameField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    
    
    private Lookup context(){
        return WindowManager.getDefault().findTopComponent("CustomerListTopComponent").getLookup();
    }

    @Override
    public void componentOpened() {
        customerNodeResult = context().lookupResult(Node.class);
        customerResult = context().lookupResult(Customer.class);
        customerQueryResult = context().lookupResult(CustomerQuery.class);
        
        customerNodeResult.addLookupListener(this);
        customerQueryResult.addLookupListener(this);
        customerResult.addLookupListener(this);
        
        resultChanged(new LookupEvent(customerResult));  
    }

    @Override
    public void componentClosed() {
        customerNodeResult.removeLookupListener(this);
        customerQueryResult.removeLookupListener(this);
        customerResult.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private String nameText;
    private String cityText;
    
    @Override
    public void resultChanged(LookupEvent lookupEvent) {
        nameField.setText("[no name]");
        cityField.setText("[no city]"); 

        //Get the query:
        Collection allQueries = customerQueryResult.allInstances();
        Iterator it1 = allQueries.iterator();
        while (it1.hasNext()) {
            query = (CustomerQuery)it1.next();
            setDisplayName("Customers");
        }
        //Get the customer:
        Collection allCustomers = customerResult.allInstances();
        Iterator it2 = allCustomers.iterator();
        while (it2.hasNext()) {
            customer = (Customer)it2.next();
            nameField.setText(customer.getName());
            cityField.setText(customer.getCity());
        }
        //Get the node:
        Collection allNodes = customerNodeResult.allInstances();
        Iterator it3 = allNodes.iterator();
        while (it3.hasNext()) {
            customerNode = (Node)it3.next();
        }
        //Need to Clear Save and Undo here
        nameText=nameField.getText();
        cityText=cityField.getText();

        //Remove New Type?
        Lookup.Result<NewType> newTypeResult= getLookup().lookupResult(NewType.class);
        Collection allNewTypes = newTypeResult.allInstances();
        Iterator it4 = allNewTypes.iterator();
        while (it4.hasNext()){
            instanceContent.remove(it4.next());
        }        
       
        if (customerNode!=null){
            this.setActivatedNodes(new Node[]{customerNode});
            for (NewType nt :customerNode.getNewTypes()){
                instanceContent.add(nt);
            }
        }
        manager.discardAllEdits();
        modify();
    }
        
    @Override
    public UndoRedo getUndoRedo() { 
        return manager; 
    }    
    
    private void modify(){
        if (!nameField.getText().equals(nameText) || !cityField.getText().equals(cityText)){
            if (getLookup().lookup(SavableViewCapability.class) == null) {
                instanceContent.add(new SavableViewCapability());
            }        
        } else {
            SavableViewCapability svc=getLookup().lookup(SavableViewCapability.class);
            if (svc != null) {
                svc.remove();
            }
        }
    }    
    
   //private static final Icon ICON = ImageUtilities.loadImageIcon("org/shop/editor/Icon.png", true);
    
    private class SavableViewCapability extends AbstractSavable {// implements Icon {
        
        SavableViewCapability(){
            register();
        }
                
        @Override
        protected String findDisplayName(){
            String name=nameField.getText();
            return "Customer: "+name;
        }
        
        CustomerEditorTopComponent tc() {
            return CustomerEditorTopComponent.this;
        }        
        
        @Override
        public void handleSave() throws IOException {
            Confirmation message = new NotifyDescriptor.Confirmation("Do you want to save \""
                + nameField.getText() +"\"?",
                NotifyDescriptor.OK_CANCEL_OPTION,
                NotifyDescriptor.QUESTION_MESSAGE);
            Object result = DialogDisplayer.getDefault().notify(message);
            //When user clicks "Yes", indicating they really want to save,
            //we need to disable the Save action,
            //so that it will only be usable when the next change is made
            //to the JTextArea:
            if (NotifyDescriptor.YES_OPTION.equals(result)) {            
                SaveableEntityCapability saveable = query.getLookup().lookup(SaveableEntityCapability.class);
                try {
                    customer.setName(nameField.getText());
                    customer.setCity(cityField.getText());
                    saveable.save(customer);
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                }
                query.reload(customerNode);
                
                nameText=nameField.getText();
                cityText=cityField.getText();
            }
            
            remove();
        }
        
        public void remove(){
            tc().instanceContent.remove(this);
            unregister();
        }
        
        @Override
        public boolean equals(Object obj) {
            if (obj instanceof SavableViewCapability) {
                SavableViewCapability m = (SavableViewCapability) obj;
                return tc() == m.tc();
            }
            return false;
        }

        @Override
        public int hashCode() {
            return tc().hashCode();
        }
/*
        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            ICON.paintIcon(c, g, x, y);
        }

        @Override
        public int getIconWidth() {
            return ICON.getIconWidth();
        }

        @Override
        public int getIconHeight() {
            return ICON.getIconHeight();
        }
*/    }
    
    
}
